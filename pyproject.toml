[build-system]
  requires = [
    "extension-helpers",
    "setuptools>=45",
    "setuptools_scm>=6.2",
    "wheel"
  ]

  build-backend = 'setuptools.build_meta'

[project]
  name = "bound_class"
  version = "0.1.0"
  description = "Classes bound to another class."
  readme = "README.rst"
  requires-python = ">=3.8"
  license = {file = "LICENSE"}
  keywords = ["python"]
  authors = [
    {name = "Nathaniel Starkman", email = "n.starkman@mail.utoronto.ca"}
  ]
  maintainers = [
    {name = "Nathaniel Starkman", email = "n.starkman@mail.utoronto.ca"}
  ]
  classifiers = [
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
  ]
  dependencies = [
    "typing_extensions>=4.2",
  ]

[project.optional-dependencies]
  all = [
  ]
  test = [
    "coverage[toml]",
    "pytest",
    "pytest-astropy-header",
    "pytest-cov",
    "pytest-doctestplus",
  ]
  docs = [
    "IPython",
    "jupyter_client",
    "nbsphinx",
    "numpydoc",
    "pydata_sphinx_theme",
    "sphinx",
    "sphinx_automodapi",
    "sphinxcontrib.bibtex",
    "tomlkit",
  ]

[project.urls]
  homepage = "https://bound_class.readthedocs.io"
  repository = "https://github.com/nstarman/bound-class"
  documentation = "https://bound_class.readthedocs.io"


[tool.setuptools]
  package-dir = {"" = "src"}

[tool.setuptools_scm]


[tool.autopep8]
  max_line_length = 120
  in-place = true
  recursive = true


[tool.black]
  line-length = 120
  include = '\.pyi?$'
  exclude = '''
  /(
      \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
  '''


[tool.isort]
  profile = "black"
  multi_line_output = 3
  include_trailing_comma = "True"
  force_grid_wrap = 0
  use_parentheses = "True"
  ensure_newline_before_comments = "True"
  sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
  known_localfolder = "bound_class"
  known_third_party = ["pytest", "setuptools"]
  import_heading_stdlib = "STDLIB"
  import_heading_thirdparty = "THIRD PARTY"
  import_heading_localfolder = "LOCAL"


[tool.mypy]
  strict = true
  show_error_codes = true
  show_error_context = true
  show_column_numbers = true
  pretty = true

  [[tool.mypy.overrides]]
    module = "*/tests/*"
    ignore_errors = true

  [[tool.mypy.overrides]]
    module = "docs/*"
    ignore_errors = true

[tool.pytest.ini_options]
  testpaths = ["src/bound_class", "docs"]
  astropy_header = "True"
  doctest_plus = "enabled"
  text_file_format = "rst"
  addopts = "--doctest-rst"
  filterwarnings = [
    # tomlkit
    "ignore:The config value `project' has type `String', defaults to `str'.",
    "ignore:The config value `htmlhelp_basename' has type `String', defaults to `str'.",
    # distutils
    "ignore:distutils Version classes are deprecated. Use packaging.version instead."
  ]


[tool.coverage.run]
  omit = [
    "*/bound_class/conftest.py",
    "*/bound_class/*setup_package*",
    "*/bound_class/tests/*",
    "*/bound_class/*/tests/*",
    "*/bound_class/_version*",
  ]

[tool.coverage.report]
  exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about packages we have installed
    "except ImportError",
    # Don't complain if tests don't hit assertions
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain about script hooks
    "'def main(.*):'",
    # Ignore branches that don't pertain to this version of Python
    "pragma: py{ignore_python_version}",
    # Don't complain about IPython completion helper
    "def _ipython_key_completions_",
  ]
